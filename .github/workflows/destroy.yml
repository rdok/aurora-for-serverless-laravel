name: Destroy
env:
  ORG: rdokos
  NAME: aurora-for-serverless-laravel
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-1' # Required to solve issue with Python AWS https://github.com/aws/aws-cli/issues/5262
  CERTIFICATE_REGION: 'us-east-1'
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
on:
  schedule:
    - cron: "0 0 * * *" # Every midnight
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: "Allowed values: prod, test"
        default: test
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment variables
        id: env
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          [ "$ENVIRONMENT" = "" ] && ENVIRONMENT=test
          STACK_LARAVEL_NAME=${ORG}-${ENVIRONMENT}-${NAME}

          echo ::set-output name=stack-laravel-name::"${STACK_LARAVEL_NAME}"
          echo ::set-output name=stack-certificate-name::"${ORG}-${ENVIRONMENT}-${NAME}-certificate"
          echo ::set-output name=stack-aurora-name::"${ORG}-${ENVIRONMENT}-${NAME}-aurora"

          PRIVATE_LINKS_STACK=${ORG}-single-${NAME}-private-links # Re-use for all environment due to unique requirements
          echo ::set-output name=stack-private-links-name::"${PRIVATE_LINKS_STACK}"

          ASSUME_ROLE=$(aws sts assume-role \
            --region $AWS_DEFAULT_REGION \
            --output json \
            --role-arn $AWS_ROLE_ARN \
            --role-session-name cicd-access \
            --query "Credentials")
          export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE | jq -r '.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE | jq -r '.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE | jq -r '.SessionToken')

          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "::add-mask::${AWS_SECRET_ACCESS_KEY}" # Hide secret from logs
          echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $GITHUB_ENV
          echo "::add-mask::${AWS_SESSION_TOKEN}" # Hide secret from logs
          echo "AWS_ROLE_SESSION_NAME=cicd-access" >> $GITHUB_ENV


          ASSETS_BUCKET=$(aws cloudformation describe-stacks  \
            --region $AWS_DEFAULT_REGION \
            --stack-name "${STACK_LARAVEL_NAME}" \
            --query 'Stacks[0].Outputs[?OutputKey==`AssetsBucketName`].OutputValue' \
            --output text || echo '404' )
          echo ::set-output name=assets-bucket::"${ASSETS_BUCKET}"

          STORAGE_BUCKET=$(aws cloudformation describe-stacks  \
            --region $AWS_DEFAULT_REGION \
            --stack-name "${STACK_LARAVEL_NAME}" \
            --query 'Stacks[0].Outputs[?OutputKey==`StorageBucketName`].OutputValue' \
            --output text || echo '404')
          echo ::set-output name=storage-bucket::"${STORAGE_BUCKET}"

      - name: Empty storage bucket
        if: ${{ steps.env.outputs.storage-bucket != '404' }}
        run: aws s3 rm --recursive s3://"${{ steps.env.outputs.storage-bucket }}"

      - name: Empty assets bucket
        if: ${{ steps.env.outputs.assets-bucket != '404' }}
        run: aws s3 rm --recursive s3://"${{ steps.env.outputs.assets-bucket }}"

      - name: Delete Laravel
        run: |
          aws cloudformation delete-stack --stack-name "${{ steps.env.outputs.stack-laravel-name }}"
          aws cloudformation wait stack-delete-complete --stack-name "${{ steps.env.outputs.stack-laravel-name }}"

      - name: Delete Aurora
        run: |
          aws cloudformation delete-stack --stack-name "${{ steps.env.outputs.stack-aurora-name }}"
          aws cloudformation wait stack-delete-complete --stack-name "${{ steps.env.outputs.stack-aurora-name }}"

      - name: Delete Certificate
        run: |
          aws --region ${CERTIFICATE_REGION} \
            cloudformation delete-stack --stack-name "${{ steps.env.outputs.stack-certificate-name }}"
          aws --region ${CERTIFICATE_REGION} \
            cloudformation wait stack-delete-complete --stack-name "${{ steps.env.outputs.stack-certificate-name }}"

      - name: Prepare private links
        id: env-private-links
        run: |
          PROD_STACK_STATUS=$(aws --output json cloudformation \
          list-stacks     \
          --query "StackSummaries[?StackName=='${{ steps.env.outputs.stack-laravel-name }}'].StackName" \
          --stack-status-filter DELETE_COMPLETE \
          --max-items 2 | jq -r '.[0] // empty')
          PROD_STACK_STATUS=${PROD_STACK_STATUS:=DELETE_COMPLETE}

          TEST_STACK_STATUS=$(aws --output json cloudformation \
          list-stacks     \
          --query "StackSummaries[?StackName=='rdokos-test-aurora-for-serverless-laravel'].StackName" \
          --stack-status-filter DELETE_COMPLETE \
          --max-items 2 | jq -r '.[0] // empty' )
          TEST_STACK_STATUS=${TEST_STACK_STATUS:=DELETE_COMPLETE}

          if [ "$PROD_STACK_STATUS" == "DELETE_COMPLETE" ] && [ "$TEST_STACK_STATUS" == "DELETE_COMPLETE" ]; then
            echo ::set-output name=should-delete::"YES"
          fi

      - name: Delete private links
        if: ${{ steps.env-private-links.outputs.should-delete == 'YES' }}
        run: |
            aws cloudformation delete-stack --stack-name "${{ steps.env.outputs.stack-private-links-name }}"
            aws cloudformation wait stack-delete-complete --stack-name "${{ steps.env.outputs.stack-private-links-name }}"
