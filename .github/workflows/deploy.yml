name: Deploy
env:
  ORG: rdokos
  NAME: aurora-for-serverless-laravel
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-1' # Required to solve issue with Python AWS https://github.com/aws/aws-cli/issues/5262
  # The role authorised to perform CI/CD actions
  # See https://github.com/rdok/cicd-iam-terraform/blob/571e63e11426889ba8f12e090d0c2e4d97432739/user.tf#L14
  # See https://github.com/rdok/cicd-iam-terraform/blob/main/aurora-for-serverless-laravel.tf
  CERTIFICATE_REGION: 'us-east-1'
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  BASE_DOMAIN_NAME: rdok.co.uk
  BASE_DOMAIN_ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.BASE_DOMAIN_ROUTE_53_HOSTED_ZONE_ID }}
  BASE_DOMAIN_WILD_CARD_CERTIFICATE_ARN: ${{ secrets.BASE_DOMAIN_WILD_CARD_CERTIFICATE_ARN }}
  APP_KEY: ${{ secrets.APP_KEY }} # Generate using `php artisan key:generate --show`
on:
  push:
    branches: [ main ]
    paths:
      - 'laravel/**'
      - '*.yml' # CloudFormation Templates
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: "Allowed values: prod, test"
        default: prod
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment variables
        id: env
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          [ "$ENVIRONMENT" = "" ] && ENVIRONMENT=test

          if [ "$ENVIRONMENT" == "test" ]; then
            echo ::set-output name=domain-name::"${NAME}-test.${BASE_DOMAIN_NAME}"
          elif [ "$ENVIRONMENT" == "prod" ]; then
            echo ::set-output name=domain-name::"${NAME}.${BASE_DOMAIN_NAME}"
          else
            printf '%s\n' "ENVIRONMENT is not in accepted range: test, prod." >&2
            exit 1
          fi

          echo ::set-output name=stack-laravel-name::"${ORG}-${ENVIRONMENT}-${NAME}"
          echo ::set-output name=stack-certificate-name::"${ORG}-${ENVIRONMENT}-${NAME}-certificate"
          echo ::set-output name=stack-aurora-name::"${ORG}-${ENVIRONMENT}-${NAME}-aurora"
          echo ::set-output name=cicd-bucket-certificate::"${ORG}-${ENVIRONMENT}-cicd-${CERTIFICATE_REGION}"
          echo ::set-output name=cicd-bucket-laravel::"${ORG}-${ENVIRONMENT}-cicd-${AWS_DEFAULT_REGION}"

          ASSUME_ROLE=$(aws sts assume-role \
            --region $AWS_DEFAULT_REGION \
            --output json \
            --role-arn $AWS_ROLE_ARN \
            --role-session-name cicd-access \
            --query "Credentials")
          export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE | jq -r '.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE | jq -r '.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE | jq -r '.SessionToken')

          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "::add-mask::${AWS_SECRET_ACCESS_KEY}" # Hide secret from logs
          echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $GITHUB_ENV
          echo "::add-mask::${AWS_SESSION_TOKEN}" # Hide secret from logs
          echo "AWS_ROLE_SESSION_NAME=cicd-access" >> $GITHUB_ENV

          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values=default \
            --query 'SecurityGroups[*].GroupId' \
            --output text)
          echo ::set-output name=security-group-id::"${SECURITY_GROUP_ID}"

          VPC_ID=$(aws ec2 describe-vpcs \
            --filters Name=isDefault,Values=true \
            --query 'Vpcs[*].VpcId' \
            --output text)
          echo ::set-output name=vpc-id::"${VPC_ID}"

          SUBNET_IDS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=${VPC_ID}" \
            --query 'Subnets[*].SubnetId' \
            --output text)
          SUBNET_IDS=$(echo $SUBNET_IDS | sed 's/ /,/g')
          echo ::set-output name=subnet-ids::"${SUBNET_IDS}"

      - name: Build Laravel
        run: |
          make config-clear
          make composer-prod
      - name: Build Static
        run: |
          cd laravel
          npm install
          npm run prod
      - name: Deploy domain certificate
        run: |
          sam deploy \
            --template-file template-certificate.yml \
            --region $CERTIFICATE_REGION \
            --s3-bucket "${{ steps.env.outputs.cicd-bucket-certificate }}" \
            --s3-prefix "${NAME}" \
            --stack-name "${{ steps.env.outputs.stack-certificate-name }}" \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --parameter-overrides \
              DomainName="${{ steps.env.outputs.domain-name }}" \
              BaseDomainRoute53HostedZoneId="${BASE_DOMAIN_ROUTE_53_HOSTED_ZONE_ID}"
      - name: Deploy Aurora
        run: |
          sam deploy \
            --region $AWS_DEFAULT_REGION \
            --s3-bucket "${{ steps.env.outputs.cicd-bucket-laravel }}" \
            --s3-prefix "${NAME}-aurora" \
            --stack-name "${{ steps.env.outputs.stack-aurora-name }}" \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --template template-aurora.yaml \
            --parameter-overrides \
              SecurityGroupId="${{ steps.env.outputs.security-group-id }}" \
              VpcId="${{ steps.env.outputs.vpc-id }}" \
              SubnetIds="${{ steps.env.outputs.subnet-ids }}"
      - name: Deploy Laravel
        run: |
          sam deploy \
            --region $AWS_DEFAULT_REGION \
            --s3-bucket "${{ steps.env.outputs.cicd-bucket-laravel }}" \
            --s3-prefix "${NAME}" \
            --stack-name "${{ steps.env.outputs.stack-laravel-name }}" \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --parameter-overrides \
              DomainName="${{ steps.env.outputs.domain-name }}" \
              WildcardCertificateARN=${BASE_DOMAIN_WILD_CARD_CERTIFICATE_ARN} \
              AppKey=${APP_KEY} \
              BaseDomainRoute53HostedZoneId=${BASE_DOMAIN_ROUTE_53_HOSTED_ZONE_ID} \
              AuroraStackName="${{ steps.env.outputs.stack-aurora-name }}" \
              CertificateStackName="${{ steps.env.outputs.stack-certificate-name }}" \
              SecurityGroupId="${{ steps.env.outputs.security-group-id }}" \
              VpcId="${{ steps.env.outputs.vpc-id }}" \
              SubnetIds="${{ steps.env.outputs.subnet-ids }}"
      - name: Run migrations
        run: |
          LAMBDA_NAME=$(aws cloudformation describe-stacks  \
            --region $AWS_DEFAULT_REGION \
            --stack-name "${{ steps.env.outputs.stack-laravel-name }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`ArtisanLambdaName`].OutputValue' \
            --output text)
          aws --output table lambda invoke \
            --cli-binary-format raw-in-base64-out \
            --function-name $LAMBDA_NAME \
            --payload '"migrate --force"' \
              response.json
          python -m json.tool response.json
      - name: Deploy Static
        run: |
          ASSETS_BUCKET=$(aws cloudformation describe-stacks  \
            --region $AWS_DEFAULT_REGION \
            --stack-name "${{ steps.env.outputs.stack-laravel-name }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`AssetsBucketName`].OutputValue' \
            --output text)
          aws s3 sync ${GITHUB_WORKSPACE}/laravel/public s3://${ASSETS_BUCKET}/assets --delete
      - name: Deploy Storage showcase file
        run: |
          STORAGE_BUCKET=$(aws cloudformation describe-stacks  \
            --region $AWS_DEFAULT_REGION \
            --stack-name "${{ steps.env.outputs.stack-laravel-name }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`StorageBucketName`].OutputValue' \
            --output text)
          aws s3 cp ${GITHUB_WORKSPACE}/laravel/storage/app/showcase-storage-retrieval.jpg s3://${STORAGE_BUCKET}
